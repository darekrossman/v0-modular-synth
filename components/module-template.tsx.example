/**
 * Template for creating audio modules with proper initialization
 * 
 * This template demonstrates the recommended pattern for:
 * - Safe async initialization with guards against double-init
 * - Automatic re-rendering of Port components after init
 * - Error handling and recovery
 * 
 * To use:
 * 1. Copy this file and rename it (remove .example extension)
 * 2. Replace "Template" with your module name
 * 3. Implement your audio graph in initAudioNodes
 * 4. Add your UI controls and ports
 */

"use client"

import { useState, useRef, useEffect, useCallback } from "react"
import { ModuleContainer } from "./module-container"
import { Port } from "./port"
import { Knob } from "@/components/ui/knob"
import { useModuleInit } from "@/hooks/use-module-init"

// Helper to get shared AudioContext
function getAudioContext(): AudioContext {
  const w = window as any
  if (!w.__ac) w.__ac = new (window.AudioContext || (window as any).webkitAudioContext)()
  if (w.__ac.state === "suspended") w.__ac.resume()
  return w.__ac as AudioContext
}

export function TemplateModule({ moduleId }: { moduleId: string }) {
  // UI State
  const [param1, setParam1] = useState([0.5])
  const [param2, setParam2] = useState([0.5])

  // Audio refs
  const audioContextRef = useRef<AudioContext | null>(null)
  const workletNodeRef = useRef<AudioWorkletNode | null>(null)
  
  // Input/Output nodes
  const inputRef = useRef<GainNode | null>(null)
  const outputRef = useRef<GainNode | null>(null)
  const cvInputRef = useRef<GainNode | null>(null)

  // Initialize audio nodes
  const initAudioNodes = useCallback(async () => {
    // Check if already initialized
    if (workletNodeRef.current) return
    
    const ac = getAudioContext()
    audioContextRef.current = ac

    // Resume context if needed
    if (ac.state === "suspended") await ac.resume()
    
    // Load worklet processor (if using one)
    // await ac.audioWorklet.addModule("/your-processor.js")

    // Create input/output nodes
    inputRef.current = ac.createGain()
    inputRef.current.gain.value = 1
    
    outputRef.current = ac.createGain()
    outputRef.current.gain.value = 1
    
    cvInputRef.current = ac.createGain()
    cvInputRef.current.gain.value = 1

    // Create your audio processing nodes here
    // Example: Create a simple gain node
    const processor = ac.createGain()
    processor.gain.value = param1[0]
    
    // Connect audio graph
    inputRef.current.connect(processor)
    processor.connect(outputRef.current)
    
    // Store main processor for parameter updates
    // workletNodeRef.current = processor // or your AudioWorkletNode

    // Set initial parameters
    processor.gain.setValueAtTime(param1[0], ac.currentTime)
  }, [param1]) // Include any initial state dependencies

  // Use the module initialization hook
  const { isReady, initError, retryInit } = useModuleInit(initAudioNodes, "TEMPLATE")

  // Update parameters when UI changes
  useEffect(() => {
    const ac = audioContextRef.current
    // const node = workletNodeRef.current
    if (!ac) return
    
    // Update your audio parameters here
    // Example: node?.parameters.get("param1")?.setTargetAtTime(param1[0], ac.currentTime, 0.01)
  }, [param1, param2])

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      try {
        inputRef.current?.disconnect()
        outputRef.current?.disconnect()
        cvInputRef.current?.disconnect()
        workletNodeRef.current?.disconnect()
      } catch {}
    }
  }, [])

  return (
    <ModuleContainer title="Template" moduleId={moduleId}>
      <div className="flex flex-col gap-4">
        {/* Show error state if initialization failed */}
        {initError && (
          <div className="text-red-500 text-sm p-2">
            Init failed
            <button onClick={retryInit} className="ml-2 underline">
              Retry
            </button>
          </div>
        )}

        {/* UI Controls */}
        <div className="flex justify-center gap-4">
          <Knob 
            value={param1} 
            onValueChange={setParam1} 
            size="md" 
            label="Param 1" 
          />
          <Knob 
            value={param2} 
            onValueChange={setParam2} 
            size="md" 
            label="Param 2" 
          />
        </div>

        <div className="flex-grow" />

        {/* Ports - no keys needed, isReady state triggers re-render */}
        <div className="flex justify-between items-end gap-2">
          <Port 
            id={`${moduleId}-cv-in`} 
            type="input" 
            label="CV" 
            audioType="cv" 
            audioNode={cvInputRef.current ?? undefined} 
          />
          <Port 
            id={`${moduleId}-audio-in`} 
            type="input" 
            label="IN" 
            audioType="audio" 
            audioNode={inputRef.current ?? undefined} 
          />
          <Port 
            id={`${moduleId}-audio-out`} 
            type="output" 
            label="OUT" 
            audioType="audio" 
            audioNode={outputRef.current ?? undefined} 
          />
        </div>
      </div>
    </ModuleContainer>
  )
}